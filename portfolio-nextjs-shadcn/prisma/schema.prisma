datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Optional: for migrations on some hosted Postgres providers you may need a shadow DB:
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String
  url         String?
  tags        String?  // comma-separated tags for simplicity
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String
  ip        String?
  createdAt DateTime @default(now())
}

// Models required by NextAuth Prisma Adapter
// Source: https://next-auth.js.org/adapters/prisma
model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // hashed password for credentials auth
  isAdmin       Boolean   @default(false)

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}